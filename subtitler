#!/bin/bash

function error {
	>&2 echo -e "$*"
}
function fatal {
	>&2 echo -e "$*"
	exit 1
}

function usage {
	cat << EOE
Usage: subtitler [OPTION]... -i [FILE]

Operations:
  --scrub           Scrubs the specified subtitle of HI artifacts. 
                    Input file has to be a subtitle

  --list            List all subtitles in the file
                    Input file has to be a Video file

  --remove          Remove all subtitles from the file
                    Input file has to be a Video file

  --extract         Extract all subtitles from the file
                    Input file has to be a Video file

Common options:
  -i, --input       			 Specifies the input file
  -v                			 Verbose
  --output-container {container} Specify a new output container

Extract options:
  -d, --remove-after-extract    Removes the subtitles from the Video file after extraction
  --create-dir                  Creates a directory for the video file and its subtitles

EOE
    exit 1
}

function do_list {
	echo "Probing subtitles from: $INPUTFILE"
	file_info=$(ffprobe -analyzeduration 100000000 -probesize 100000000 -hide_banner -of csv "$INPUTFILE" 2>&1) || fatal "Failed to resolve file info using ffprobe. Output: \n$file_info"
	
	[ -n "$VERBOSE" ] && echo -e "ffprobe result: \n$file_info"
	subtitles_data=$(echo "$file_info" | grep -i "^\s*Stream" | grep -i "Subtitle:")

	if [ -z "$subtitles_data" ]; then
		echo -e "No subtitles found."
	else
	    echo -e "Found subtitles:\n$subtitles_data"	
    fi
}

function do_extract {

	echo "Extracting subtitles from: $INPUTFILE"
	file_info=$(ffprobe -analyzeduration 100000000 -probesize 100000000 -hide_banner -of csv "$INPUTFILE" 2>&1) || fatal "Failed to resolve file info using ffprobe. Output: \n$file_info"
	
	[ -n "$VERBOSE" ] && echo -e "ffprobe result: \n$file_info"
	subtitles_data=$(echo "$file_info" | grep -i "^\s*Stream" | grep -i "Subtitle:")

	if [ -z "$subtitles_data" ]; then
		error "$INPUTFILE does not contain any subtitles."
		[ -z "$CREATE_DIR" ] && fatal
		
		mkdir -p -v "$OUTPUT_DIR"
		mv -v "$INPUTFILE" "$OUTPUT_DIR/"
		exit 0
	fi

	echo -e "Found subtitles:\n$subtitles_data"
	subtitles=$(echo "$subtitles_data" | filter_unsupported_subtitles | parse_subtitle_info) || fatal "Failed to parse subtitles from info: \n$subtitles_data"
	
	mkdir -p -v "$OUTPUT_DIR"

	if [ -n "$subtitles" ]; then
		extract_subtitles "$subtitles"
		echo "Extraction complete."
	else
		error "Only image based subtitles found."
	fi

	if [ -z "$REMOVE_AFTER_EXTRACT" ]; then
		exit 0
	fi

	old_file="$INPUTFILE_DIR/${INPUTFILENAME_WITHOUT_EXTENSION}.old.${INPUTFILE_EXTENSION}"

	mv -v "$INPUTFILE" "$old_file"
	output_file="${OUTPUT_DIR}/${INPUTFILENAME_WITHOUT_EXTENSION}.${OUTPUT_CONTAINER}"

	echo "Creating new file without subtitles: $output_file"
	echo "ffmpeg -i \"$old_file\" -sn -c copy \"$output_file\""
	ffmpeg -analyzeduration 100000000 -probesize 100000000 -loglevel warning -i "$old_file" -sn -c copy "$output_file" || fatal "Failed to create new file without subtitles"
	rm -v "$old_file"
	echo
}
function filter_unsupported_subtitles {
	grep -v 'dvd_subtitle' |
	grep -v 'dvb_subtitle' |
	grep -v 'pgs_subtitle'
}
function parse_subtitle_info {
	local res
	# Can look like: 
	#   Stream #0:2(eng): Subtitle: ass
  	#   Stream #0:2[0x3](eng): Subtitle: mov_text (tx3g / 0x67337874), 720x60, 0 kb/s (default)
	#   Stream #0:2: Subtitle: subrip (default)
	#   Stream #0:2(eng): Subtitle: subrip (default) (forced)

	res=$(cat | 
		sed -E 's/\s*Stream #(.*)/\1/g' | # Remove all preceding junk
		while read -r line; do
			stream=$(echo "$line" | grep -o -E '^[0-9]+:[0-9]+')
			lang=$(  echo "$line" | sed -E -n 's/.*\(([a-z]+)\):.*/\1/p')
			[ -z "$stream" ] && stream="unknown"
			[ -z "$lang" ] && lang="unknown"
			if echo "$line" | grep -q "(forced)"; then
				lang="$lang.forced"
			fi
			if echo "$line" | grep -q "(hearing impaired)"; then
				lang="$lang.hi"
			fi
			
			echo "$stream|$lang"
		done)
	if echo "$res" | grep -q '^unknown'; then
		fatal "Failed to resolve stream number for some subtitle streams. Result was: \n$res"
	fi
	echo "$res"
}

function extract_subtitles {
	local subtitles stream lang output_file
	subtitles=$1
	mkdir -p -v "$OUTPUT_DIR"

	for subtitle in $subtitles; do
		stream=$(echo "$subtitle" | cut -d'|' -f1)
		lang=$(echo "$subtitle" | cut -d'|' -f2)
		output_file="$OUTPUT_DIR/${INPUTFILENAME_WITHOUT_EXTENSION}.${lang}.srt"
		
		local i=0
		while [ -f "$output_file" ]; do
			i=$((i+1))
			output_file="$OUTPUT_DIR/${INPUTFILENAME_WITHOUT_EXTENSION}.${lang}.$i.srt"
		done
		echo "Extracting $output_file"

		echo "ffmpeg -i \"$INPUTFILE\" -map \"$stream\" -c srt \"$output_file\""

		ffmpeg -analyzeduration 100000000 -probesize 100000000 -loglevel warning -i "$INPUTFILE" -map "$stream" -c srt "$output_file" || fatal "Failed to extract subtitles"
		scrub_subtitle "$output_file"
	done
}

function do_remove {

	file_info=$(ffprobe -analyzeduration 100000000 -probesize 100000000 -hide_banner -of csv "$INPUTFILE" 2>&1) || fatal "Failed to resolve file info using ffprobe. Output: \n$file_info"
	[ -n "$VERBOSE" ] && echo -e "ffprobe result: \n$file_info"
	
	subtitles=$(echo "$file_info" | grep -i "^\s*Stream" | grep -i "Subtitle:")
	if [ -z "$subtitles" ]; then
		fatal "No subtitles found."
	fi
	echo -e "Found subtitles:\n$subtitles"

	output_file="$INPUTFILE_DIR/${INPUTFILENAME_WITHOUT_EXTENSION}.new.${OUTPUT_CONTAINER}"

	echo "Creating new file without subtitles: $output_file"
	echo "ffmpeg -i \"$INPUTFILE\" -sn -c copy \"$output_file\""
	ffmpeg -analyzeduration 100000000 -probesize 100000000 -loglevel warning -i "$INPUTFILE" -sn -c copy "$output_file" || fatal "Failed to remove subtitles"
	rm -v "$INPUTFILE"
	mv -v "$output_file" "$INPUTFILE"
}

function scrub_subtitle {
	input=$1
	echo "Scrubbing subtitle: $input"
	
	# Remove ASS subtitle leftovers: {\an2}
	sed -i -E 's/\{\\[^\}]+\}//g' "$input"

	# Remove html tags: <font>Hello</font>
	sed -i -E 's/<\/?[^>]+>//g' "$input"
	
	# Remove everything within square brackets: [LOUD NOISE]
	sed -i -z -E 's/\[[^]]+\]//g' "$input"

	# Remove everything within parenthesis: (LOUD NOICE)
	sed -i -z -E 's/\([^)]+\)//g' "$input"

	# Remove Capitals followed by colon: SIMON SAYS: 
	sed -i -z -E 's/[A-Z]{2}+[A-Z0-9 ]*\s?: *\n?//g' "$input"
}

while [ $# -gt 0 ]; do
	case $1 in
		--remove)
			COMMAND=remove
			;;
		--extract)
			COMMAND=extract
			;;
        --list)
			COMMAND=list
			;;
		--scrub)
			COMMAND=scrub
			;;
		-d|--remove-after-extract)
			REMOVE_AFTER_EXTRACT=true
			;;
		-i|--input)
			INPUTFILE=${2:?'-i requires a parameter'}
			shift 1
			;;
		--create-dir)
			CREATE_DIR=true
			;;
		--output-container)
			OUTPUT_CONTAINER=${2:?'--output-container requires a parameter'}
			shift 1
			;;
		-v|--verbose)
			VERBOSE=true
			;;
        -h|--help)
            usage
            ;;
		*) 
			error "Unexpected parameter: $1\n"
            usage
			;;
	esac
	shift
done

[ -z "$COMMAND" ] && usage
[ -z "$INPUTFILE" ] && fatal "No input file specified."
[ ! -f "$INPUTFILE" ] && fatal "Input file does not exist: $INPUTFILE"

INPUTFILE_DIR=$(cd "$(dirname "$INPUTFILE")" && pwd)
INPUTFILE_BASENAME=$(basename "$INPUTFILE")
INPUTFILE="$INPUTFILE_DIR/$INPUTFILE_BASENAME"
INPUTFILENAME_WITHOUT_EXTENSION=${INPUTFILE_BASENAME%.*}
INPUTFILE_EXTENSION=${INPUTFILE_BASENAME##*.}

if [ -n "$CREATE_DIR" ]; then
	OUTPUT_DIR="$INPUTFILE_DIR/$INPUTFILENAME_WITHOUT_EXTENSION"
else
	OUTPUT_DIR="$INPUTFILE_DIR"
fi

if [ -z "$OUTPUT_CONTAINER" ]; then
	OUTPUT_CONTAINER=$INPUTFILE_EXTENSION
fi

echo -e "\nInputfile: $INPUTFILE"

case $COMMAND in
    list)
        do_list ;;
	remove)
		do_remove ;;
	extract)
		do_extract ;;
	scrub)
		scrub_subtitle "$INPUTFILE" ;;
	*)
		fatal "Unknown command: $COMMAND" ;;
esac
